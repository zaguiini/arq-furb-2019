.MODEL	SMALL
;8255
IO4  EQU  0800h

ADR_PPI_PORTA	EQU  (IO4)
ADR_PPI_PORTB	EQU  (IO4 + 02h)
ADR_PPI_PORTC	EQU  (IO4 + 04h)
ADR_PPI_CONTROL	EQU  (IO4 + 06h)

PPI_PORTA_INP	EQU  10h
PPI_PORTA_OUT	EQU  00h
PPI_PORTB_INP	EQU  02h
PPI_PORTB_OUT	EQU  00h
PPI_PORTCL_INP	EQU  01h
PPI_PORTCL_OUT	EQU  00h
PPI_PORTCH_INP	EQU  08h
PPI_PORTCH_OUT	EQU  00h
PPI_MODE_BCL_0	EQU  00h
PPI_MODE_BCL_1	EQU  04h
PPI_MODE_ACH_0	EQU  00h
PPI_MODE_ACH_1	EQU  20h
PPI_MODE_ACH_2	EQU  40h
PPI_ACTIVE	EQU  80h 

.8086
.code

ORG 0008H
PONTEIRO_TRATADOR_INTERRUPCAO DB 4 DUP(?) ; PONTEIRO PARA INTERRUPCAO
;APONTA PARA UMA ROTINA CHAMADA A CADA 1 SEGUNDO VIA HARDWARE INTERRUPT
;OBSERVE NO 8086 O PINO NMI, ELE ESTA RECEBENDO UM PULSO A CADA UM SEGUNDO, FORÇANDO A INTERRUPÇÃO

ORG 0400H

ENABLE_PULSE:
   CALL GLCD_EN_HIGH
   CALL GLCD_EN_LOW
   RET

GLCD_ON:
   CALL GLCD_CS1_LOW
   CALL GLCD_CS2_LOW
   CALL GLCD_RS_LOW
   CALL GLCD_RW_LOW
   MOV AL,03FH
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   RET   
   
GLCD_SET_START_LINE:
   CALL GLCD_RS_LOW
   CALL GLCD_RW_LOW
   CALL GLCD_CS1_LOW
   CALL GLCD_CS2_LOW
   MOV  GLCD_DATA,0C0H
   OR   GLCD_DATA, AL
   CALL ENABLE_PULSE 
   RET   

GLCD_GOTO_COL:
   PUSHF
   PUSH AX
   CALL GLCD_RS_LOW
   CALL GLCD_RW_LOW
   CMP AH,64
   JL LEFT
   
   CALL GLCD_CS2_LOW
   CALL GLCD_CS1_HIGH
   SUB AH,64
   MOV COL_DATA,AH
   JMP SAI_GOTO_COL
   
LEFT:
    CALL GLCD_CS1_LOW
    CALL GLCD_CS2_HIGH
    MOV COL_DATA,AH

SAI_GOTO_COL:
   OR COL_DATA, 40H
   AND COL_DATA, 7FH
   MOV AL,COL_DATA
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   POP AX
   POPF
   RET
   
GLCD_GOTO_ROW:
   PUSH AX
   CALL GLCD_RS_LOW
   CALL GLCD_RW_LOW
   OR AL,0B8H
   AND AL,0BFH
   MOV COL_DATA,AL
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   POP AX
   RET
   
; AH Y=LINHA E  AL X=COLUNA
GLCD_GOTO_XY:
   CALL GLCD_GOTO_COL
   CALL GLCD_GOTO_ROW
   RET

; AL = DATA
GLCD_WRITE:
   CALL GLCD_RS_HIGH
   CALL GLCD_RW_LOW
   CALL MANDA_PORT_B
   CALL ENABLE_PULSE
   RET
   
;AL = DATA  
GLCD_CLRLN:   
   PUSHF
   PUSH AX
   PUSH CX
   MOV AH,0
   CALL GLCD_GOTO_XY
   MOV AH,64
   CALL GLCD_GOTO_XY
   CALL GLCD_CS1_LOW
   MOV AL,0
   MOV CX,64
ESCREVA:   
   CALL GLCD_WRITE
   LOOP ESCREVA
   POP CX
   POP AX
   POPF
   RET

GLCD_CLR:
   PUSHF
   PUSH AX
   MOV AL,0
CLRLN:   
   CALL GLCD_CLRLN
   ADD AL,1
   CMP AL,8
   JNE CLRLN
   POP AX
   POPF
   RET

;AH, AL, BH
GLCD_DRAW_POINT:
    PUSHF
	PUSH AX
    PUSH BX
    PUSH CX

    PUSH AX ; SALVA AH, AL
    PUSH AX ; SALVA AH, AL
    
    MOV CH,AH ; SALVA AH
    MOV AH,0

    MOV BL,8
    DIV BL
    
    MOV AH,CH
    CALL GLCD_GOTO_XY
    
    POP AX  ; RESTAURA AH, AL
    
    CMP BH,0
    JE LIGHT_SPOT
    
    MOV AH,0
    MOV BH,8
    DIV BH
    ; AH RESTO
    MOV CL,AH
    MOV AL,1
    SHL AL,CL
    MOV COL_DATA_AUX,AL
    
    MOV AH,CH
	CALL GLCD_READ_DATA
	OR COL_DATA_AUX,AL

    JMP SAI_GLCD_DRAW_POINT
    
LIGHT_SPOT:
    MOV AH,0
    MOV BH,8
    DIV BH
    ; AH RESTO
    MOV CL,AH
    MOV AL,1
    SHL AL,CL
    NOT AL
    MOV COL_DATA_AUX,AL

    MOV AH,CH
	CALL GLCD_READ_DATA
	AND COL_DATA_AUX,AL

SAI_GLCD_DRAW_POINT:
    POP AX

    MOV CH,AH ; SALVA AH
    MOV AH,0

    MOV BL,8
    DIV BL
    
    MOV AH,CH
    CALL GLCD_GOTO_XY
   
    MOV AL, COL_DATA_AUX
    CALL GLCD_WRITE
   
    POP CX
    POP BX
	POP AX
    POPF
    RET 

GLCD_READ_DATA:
	CALL INICIALIZA_8255_PORT_INPUT
	CALL GLCD_RW_HIGH
	CALL GLCD_RS_HIGH
	CMP AH,63
    JG  HAB_CS2

HAB_CS1:
	CALL GLCD_CS2_HIGH
	CALL GLCD_CS1_LOW
    JMP HAB

HAB_CS2:
	CALL GLCD_CS2_LOW
	CALL GLCD_CS1_HIGH

HAB:
     CALL GLCD_EN_HIGH
     CALL GLCD_EN_LOW
     CALL GLCD_EN_HIGH
     CALL LE_PORT_B
     MOV READ_DATA,AL
     CALL GLCD_EN_LOW
     CALL INICIALIZA_8255_PORTB_OUTPUT
     RET

PLOT_BMP:
	PUSHF
	PUSH AX
	PUSH SI
	MOV AL,0
	MOV AH,0
PLOT:
	CALL GLCD_GOTO_XY
	PUSH AX
	MOV AL,[SI]
        CALL GLCD_WRITE
	POP AX
	INC SI
	INC AH
	CMP AH,127
	JNE PLOT
	MOV AH,0
	INC AL
	CMP AL,8
	JNE PLOT
	POP SI
	POP AX
	POPF 
	RET

GLCD_CS1_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 32
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_CS1_LOW:
   PUSHF
   PUSH AX
   MOV AL, 32
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_CS2_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 16
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_CS2_LOW:
   PUSHF
   PUSH AX
   MOV AL, 16
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_RST_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 1
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_RST_LOW:
   PUSHF
   PUSH AX
   MOV AL, 1
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_EN_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 2
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_EN_LOW:
   PUSHF
   PUSH AX
   MOV AL, 2
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_RW_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 4
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET
   
GLCD_RW_LOW:
   PUSHF
   PUSH AX
   MOV AL, 4
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_RS_HIGH:
   PUSHF
   PUSH AX
   OR  GLCD_CONTROL, 8
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET

GLCD_RS_LOW:
   PUSHF
   PUSH AX
   MOV AL, 8
   NOT AL
   AND  GLCD_CONTROL, AL
   MOV AL,GLCD_CONTROL
   CALL MANDA_PORT_A
   POP AX
   POPF
   RET
  
INICIALIZA_8255_PORTB_OUTPUT:
   PUSHF
   PUSH AX
   PUSH DX
   MOV DX, ADR_PPI_CONTROL
   MOV AL,0
   OR AL,PPI_PORTA_OUT
   OR AL,PPI_PORTB_OUT  
   OR AL,PPI_PORTCL_INP
   OR AL,PPI_PORTCH_INP
   OR AL,PPI_MODE_BCL_0
   OR AL,PPI_MODE_ACH_0
   OR AL,PPI_ACTIVE
   OUT DX,AL
   POP DX
   POP AX
   POPF
   RET

INICIALIZA_8255_PORT_INPUT:
   PUSHF
   PUSH AX
   PUSH DX
   MOV DX, ADR_PPI_CONTROL
   MOV AL,0
   OR AL,PPI_PORTA_OUT
   OR AL,PPI_PORTB_INP
   OR AL,PPI_PORTCL_INP
   OR AL,PPI_PORTCH_INP
   OR AL,PPI_MODE_BCL_0
   OR AL,PPI_MODE_ACH_0
   OR AL,PPI_ACTIVE
   OUT DX,AL
   POP DX
   POP DX
   POPF
   RET

MANDA_PORT_A:
    PUSHF
    PUSH DX
    MOV DX,ADR_PPI_PORTA
    OUT DX,AL
    POP DX
    POPF
    RET

MANDA_PORT_B:
    PUSHF
    PUSH DX
    MOV DX,ADR_PPI_PORTB
    OUT DX,AL
    POP DX
    POPF
    RET

LE_PORT_B:
    PUSHF
    PUSH DX
    MOV DX,ADR_PPI_PORTB
    IN AL,DX
    POP DX
    POPF
    RET

     
.startup

	MOV AX,0000
	MOV DS,AX
	
	MOV WORD PTR PONTEIRO_TRATADOR_INTERRUPCAO, OFFSET INTERRUPT_ONE_SECOND
	MOV WORD PTR PONTEIRO_TRATADOR_INTERRUPCAO + 2, SEG INTERRUPT_ONE_SECOND 
	 
	MOV AX,@DATA
	MOV DS,AX
	MOV AX,@STACK
	MOV SS,AX
	
	CALL INICIALIZA_8255_PORTB_OUTPUT
	
	CALL GLCD_CS1_HIGH
	CALL GLCD_CS2_HIGH
	CALL GLCD_RST_HIGH
	CALL GLCD_ON

;ESTE EXEMPLO DESENHA UM CAMINHAO TRUCK E EM POSICOES GRAFICAS ALEATORIAS APAGA E ACENDE PIXEL
;PARA GERAR UM NUMERO ALEATORIO, BASTA APENAS CHAMAR A FUNCAO RANDOM
;A FUNCAO RANDOM RETORNA EM AX UM NUMERO RANDOMICO
;PARA EVITAR QUE SEMPRE OCORRA A MESMA SEQUENCIA, DENTRO DA INTERRUPCAO, É INCREMENTADO UMA VARIAVEL (SEED)
;INC BYTE PTR CONTADOR_SEED
;ELA FARA PARTE DO CALCULO DO RANDOM
;APESAR DE TUDO SER SINCRONIZADO NO PROTEUS, INCLUSIVE AS INTERRUPCOES, FACA O SEGUINTE NO TERMINAL BURRO
;!PRESSIONE UMA TECLA PARA INICIAR!
;ENQUANTO VOCE NAO PRESSIONAR UMA TECLA, AS INTERRUPCOES CONTINUAM OCORRENDO (SEED)
;COMO VOCE NUNCA VAI PRESSIONAR A TECLA SEMPRE NO MESMO "TIME", O SEED SEMPRE SERÁ DIFERENTE!


DEMO:
;PLOTA CAMINHAO TRUCK
	CALL GLCD_CLR
	LEA SI, TRUCK
	CALL PLOT_BMP

;GERA UM RANDOM PARA PIXEL COLUNA (ESTA NO INTERVALO)
RAND_COLUNA:
    CALL RANDOM  ; COLUNA
    CMP AL,127
    JG RAND_COLUNA	
    MOV CH,AL
;GERA UM RANDOM PARA PIXEL LINHA (ESTA NO INTERVALO)
RAND_LINHA:
    CALL RANDOM  ; LINHA
    CMP AL,63
    JG RAND_LINHA
    MOV CL,AL
    ;CH E CL CONTEM COLUNA E LINHA ALEATORIAS

;GERA UM RANDOM PARA  INDICAR SE QUERES PIXEL LIGADO OU DESLIGADO
;FILTRA BIT MAIS A DIREITA DO QUE PERGUNTAR SE É ZERO OU UM
RAND_PIXEL:
    CALL RANDOM
    AND AL,00000001B  ;acende ou apaga pixel ?
	MOV BH,AL

    ; BH INDICA SE É PARA ACENDER OU APAGAR PIXEL
	MOV AH,CH
	MOV AL,CL
	CALL GLCD_DRAW_POINT

;REPETE LOOP

	JMP RAND_COLUNA
	
;==============================================	
; ESTA ROTINA É CHAMADA UMA VEZ POR SEGUNDO
; USADO PARA MUDAR O SEED	
INTERRUPT_ONE_SECOND:
	 PUSHF	 
	 INC BYTE PTR CONTADOR_SEED
SAI_INTERRUPT:
	 POPF
	 IRET
;==============================================	 
	 
RANDOM:
	PUSH DX
	MOV AX,SEED ;; AX = seed
	ADD AL,CONTADOR_SEED ; ATUALIZADO A CADA 1 SEGUNDO VIA INTERRUPT
	MOV DX,8405h ;; DX = 8405h
	MUL DX ;; MUL (8405h * SEED) into dword DX:AX
;
	CMP AX,SEED
	JNZ GOTSEED ;; if new SEED = old SEED, alter SEED
	MOV AH,DL
	INC AX
GOTSEED:
	MOV SEED,AX ;; We have a new seed, so store it
	MOV AX,DX ;; AL = random number
	POP DX
	RET

.DATA
CONTADOR_SEED DB 0 ; SEED PARA NUMERO ALEATORIO

GLCD_CONTROL DB 0
GLCD_DATA    DB 0
COL_DATA DB 0
COL_DATA_AUX DB 0
READ_DATA DB 0

SEED DW 2332h
RNDNUM DW 0


TRUCK 	DB 0,  0,  0,  0,  0,248,  8,  8,  8,  8,  8,  8, 12, 12, 12, 12 
		DB 12, 10, 10, 10, 10, 10, 10,  9,  9,  9,  9,  9,  9,  9,  9,  9
		DB 9,  9,  9,  9,  9,  9,  9,  9,  9,  9,137,137,137,137,137,137 
		DB 137,137,137,137,137,137,137,  9,  9,  9,  9,  9,  9,  9,  9,  9
		DB   9,  9, 13,253, 13,195,  6,252,  0,  0,  0,  0,  0,  0,  0,  0 
		DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 
		DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 
		DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 
		DB   0,  0,  0,  0,  0,255,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 
		DB 240,240,240,240,240,224,224,240,240,240,240,240,224,192,192,224 
		DB 240,240,240,240,240,224,192,  0,  0,  0,255,255,255,255,255,195 
		DB 195,195,195,195,195,195,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0 
		DB   0,  0,  0,255,240, 79,224,255, 96, 96, 96, 32, 32, 32, 32, 32
		DB  32, 32, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64,128,  0,  0,  0 
		DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 
		DB  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 
		DB   0,  0,  0,  0,  0,255,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 
		DB 255,255,255,255,255,  0,  0,  0,  0,255,255,255,255,255,  0,  0 
		DB   0,  0,255,255,255,255,255,  0,  0,  0,255,255,255,255,255,129 
		DB 129,129,129,129,129,129,128,  0,  0,  0,  0,  0,  0,  0,  0,  0 
		DB   0,  0,  0,255,  1,248,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8 
		DB   8,  8,  8,  8, 16,224, 24, 36,196, 70,130,130,133,217,102,112 
		DB  160,192, 96, 96, 32, 32,160,160,224,224,192, 64, 64,128,128,192 
		DB  64,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 
		DB   0,  0,  0,  0,  0, 63, 96, 96, 96,224, 96, 96, 96, 96, 96, 96 
		DB  99, 99, 99, 99, 99, 96, 96, 96, 96, 99, 99, 99, 99, 99, 96, 96 
		DB  96, 96, 99, 99, 99, 99, 99, 96, 96, 96, 99, 99, 99, 99, 99, 99 
		DB  99, 99, 99, 99, 99, 99, 99, 96, 96, 96, 96, 96, 96, 96, 64, 64 
		DB  64,224,224,255,246,  1, 14,  6,  6,  2,  2,  2,  2,  2,  2,  2 
		DB   2,  2,  2,  2,130, 67,114, 62, 35, 16, 16,  0,  7,  3,  3,  2 
		DB   4,  4,  4,  4,  4,  4,  4, 28, 16, 16, 16, 17, 17,  9,  9, 41
		DB 112, 32, 67,  5,240,126,174,128, 56,  0,  0,  0,  0,  0,  0,  0
		DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1 
		DB   1,  1,127,127,127,127,255,255,247,251,123,191, 95, 93,125,189 
		DB 189, 63, 93, 89,177,115,243,229,207, 27, 63,119,255,207,191,255 
		DB 255,255,255,255,255,255,255,127,127,127,127,127,127,127,127,255 
		DB 255,255,127,127,125,120,120,120,120,120,248,120,120,120,120,120 
		DB 120,248,248,232,143,  0,  0,  0,  0,  0,  0,  0,  0,128,240,248 
		DB 120,188,220, 92,252, 28, 28, 60, 92, 92, 60,120,248,248, 96,192 
		DB 143,168,216,136, 49, 68, 72, 50,160, 96,  0,  0,  0,  0,  0,  0 
		DB   0,  0,  0,128,192,248,248,248,248,252,254,254,254,254,254,254 
		DB 254,254,254,254,254,255,255,255,255,255,246,239,208,246,174,173 
		DB 169,128,209,208,224,247,249,255,255,252,220,240,127,255,223,255 
		DB 255,255,255,255,255,254,254,255,255,255,255,255,255,255,254,255 
		DB 255,255,255,255,255,255,254,254,254,254,254,254,254,254,254,254 
		DB 254,254,254,254,255,255,255,255,255,255,254,255,190,255,255,253 
		DB 240,239,221,223,254,168,136,170,196,208,228,230,248,127,126,156 
		DB 223,226,242,242,242,242,242,177, 32,  0,  0,  0,  0,  0,  0,  0 
		DB   0,  0,  0,  1,  1,  1,  1,  3,  3,  3,  7,  7,  7,  7,  7, 15 
		DB  15, 15,  7, 15, 15, 15,  7,  7, 15, 14, 15, 13, 15, 47, 43, 43 
		DB  43, 43, 43, 47,111,239,255,253,253,255,254,255,255,255,255,255 
		DB 191,191,239,239,239,191,255,191,255,255,255,255,255,255,255,255 
		DB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255 
		DB 255,255,255,255,127,127,127,127,255,255,191,191,191,191,255,254 
		DB 255,253,255,255,255,251,255,255,255,127,125, 63, 31, 31, 31, 31 
		DB  31, 31, 63, 15, 15,  7,  7,  3,  3,  3,  0,  0,  0,  0,  0,  0 
		DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 
		DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 
		DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0 
		DB   1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1 
		DB   1,  1,  1,  1,  3,  3,  3, 11, 11, 11, 11,  7,  3, 14,  6,  6 
		DB   6,  2, 18, 19, 19,  3, 23, 21, 21, 17,  1, 19, 19,  3,  6,  6 
		DB  14, 15, 15,  7, 15, 15, 15, 11,  2,  0,  0,  0,  0,  0,  0,  0 
		DB   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 

.STACK

MINHA_PILHA DW 128 DUP(?)

END
